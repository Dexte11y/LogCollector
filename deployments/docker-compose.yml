version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - logcollector_net
  

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - logcollector_net


  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - logcollector_net


  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: log_collector
    ports:
      - "5432:5432"
    networks:
      - logcollector_net

  
  app:
    build:
        context: ..   #необходимо указать путь к Dockerfile
        dockerfile: deployments/Dockerfile
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    command: ["sh", "-c", "sleep 10 && go run cmd/app/main.go"]
    ports:
      - 8080:8080
    networks:
      - logcollector_net


  producer:
    build:
      context: ../../logproducer  #необходимо указать путь к исполняемому файлу producer в другом микросервисе 
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    command: ["sh", "-c", "sleep 10 && go run main.go"]
    networks:
      - logcollector_net


  prometheus:
    image: prom/prometheus
    depends_on:
      - app
      - producer
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - logcollector_net


  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - logcollector_net

  
  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    ports:
      - "9100:9100"
    networks:
      - logcollector_net


networks:
  logcollector_net:
    driver: bridge
    
